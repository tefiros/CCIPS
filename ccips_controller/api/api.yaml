openapi: 3.0.0
info:
  title: CCIPS API
  version: '1.0'
  description: API to deploy the IPsec tunnel using the CCIPS controller
  contact:
    email: mattinantartiko.elorzaforcada@telefonica.com
servers:
  - url: 'http://localhost:5000'
paths:
  /ccips:
    post:
      summary: Create IPsec Tunnel
      operationId: api.create_i2nsf
      responses:
        '200':
          $ref: '#/components/responses/IPsecInfo'
        '500':
          $ref: '#/components/responses/Error'
      description: Create the I2NSF IPSec tunnel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfig'
            examples:
              example-1:
                value:
                  nodes:
                    - networkInternal: 192.168.100.0/24
                      ipData: 10.0.0.100
                      ipControl: 192.168.165.101
                    - networkInternal: 192.168.200.0/24
                      ipData: 10.0.0.61
                      ipControl: 192.168.165.141
                  encAlg:
                    - 3-des-cbc
                  intAlg:
                    - sha1
                  softLifetime: 120
                  hardLifetime: 140
              example-2:
                value:
                  nodes:
                    - networkInternal: 192.168.200.0/24
                      ipData: 81.44.28.113
                      ipControl: 10.0.0.10
                    - networkInternal: 10.10.244.236/24
                      ipData: 195.37.154.72
                      ipControl: 10.10.244.236
                  encAlg:
                    - aes-cbc
                  intAlg:
                    - sha2-256
                  softLifetime: 25
                  hardLifetime: 50
        description: ''
    parameters: []
  '/ccips/{uuid}':
    get:
      summary: Get IPsec tunnel status
      tags:
        - I2NSF
      responses:
        '200':
          $ref: '#/components/responses/IPsecInfo'
        '400':
          $ref: '#/components/responses/Error'
      operationId: api.status_i2nsf
      description: Get the current status of the IPsec Tunnel
    parameters:
      - schema:
          type: string
          format: uuid
        name: uuid
        in: path
        required: true
        description: Identification of the IPsec tunnel
    delete:
      summary: Delete IPsec tunnel
      operationId: api.delete_i2nsf
      responses:
        '200':
          $ref: '#/components/responses/Response'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      description: Remove I2NSF
      tags:
        - I2NSF
  /forwardqkd:
    post:
      summary: Forward QKD session creation request
      operationId: api.forward_qkd
      description: |
        Forwards a QKD session creation request to both specified endpoints (`endpoint1` and `endpoint2`).
        Returns success if both endpoints respond successfully.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                use-qkd:
                  type: string
                  enum: [yes, no]
                  description: Flag to enable or disable QKD.
                pqc-algorithm:
                  type: string
                  description: PQC algorithm to use (e.g., kyber-512).
                hybridization-method:
                  type: string
                  enum: [xor, none]
                  description: Hybridization method for the key.
                endpoint1:
                  type: string
                  format: ipv4
                  description: IP address of the first endpoint.
                endpoint2:
                  type: string
                  format: ipv4
                  description: IP address of the second endpoint.
              required:
                - use-qkd
                - endpoint1
                - endpoint2
            examples:
              example-1:
                value:
                  use-qkd: "yes"
                  pqc-algorithm: "kyber-512"
                  hybridization-method: "xor"
                  endpoint1: "192.168.159.35"
                  endpoint2: "192.168.159.21"
      responses:
        '200':
          description: Request forwarded successfully to both endpoints.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Reenvío exitoso a ambos endpoints"
        '400':
          description: Invalid request body (e.g., unreadable JSON).
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
        '502':
          description: Failed to forward request to one or both endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
        '500':
          description: Internal server error during processing.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
components:
  schemas:
    Node:
      title: Node
      type: object
      properties:
        networkInternal:
          type: string
        ipData:
          type: string
        ipControl:
          type: string
        ipDMZ:
          type: string
          format: ipv4
    DeploymentConfig:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        encAlg:
          type: array
          items:
            type: string
            enum:
              - des
              - 3des
              - aes-cbc
        intAlg:
          type: array
          items:
            type: string
            enum:
              - hmac-md5-96
              - hmac-md5-128
              - hmac-sha1-96
              - hmac-sha1-160
              - sha2-256
        softLifetime:
          $ref: '#/components/schemas/LifetimeConfig'
        hardLifetime:
          $ref: '#/components/schemas/LifetimeConfig'
      required:
        - nodes
        - encAlg
        - intAlg
    LifetimeConfig:
      title: LifetimeConfig
      type: object
      description: Configuration of the lifetime values used by the tunnel
      properties:
        nBytes:
          type: number
          default: 0
          minimum: 0
        nPackets:
          type: number
          default: 0
          minimum: 0
        nTime:
          type: number
          minimum: 10
          default: 10
        nTimeIdle:
          type: number
          minimum: 0
          default: 0
  responses:
    IPsecInfo:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
              nodes:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
              encAlg:
                type: string
              intAlg:
                type: string
              status:
                type: string
              softLifetime:
                type: number
              hardLifetime:
                type: number
          examples:
            example-1:
              value:
                id: d7a83420-31fc-43eb-ae86-ddf891c9261b
                nodes:
                  - ipControl: 192.168.165.141
                    ipData: 10.0.0.61
                    networkInternal: 192.168.200.0/24
                  - ipControl: 192.168.165.101
                    ipData: 10.0.0.161
                    networkInternal: 192.168.100.0/24
                encAlg: 3-des-cbc
                intAlg: sha1
                softLifetime: 25
                hardLifetime: 50
    Error:
      description: Generic error response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
              description:
                type: string
            required:
              - code
              - message
          examples:
            example-400:
              value:
                code: 400
                message: "JSON inválido"
                description: "El cuerpo de la solicitud no se pudo decodificar."
            example-502:
              value:
                code: 502
                message: "Error al reenviar a endpoint1"
                description: "No se pudo conectar al endpoint1."
            example-500:
              value:
                code: 500
                message: "Internal server error"
                description: "Error al procesar la solicitud."
    Response:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
            required:
              - code
              - message
          examples:
            example-1:
              value:
                code: 200
                message: I2NSF Removed
