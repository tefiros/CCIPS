/*
 * i2nsf-api
 *
 * API to deploy the i2nsf tunnel
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/google/uuid"

	"github.com/gorilla/mux"
)

type StorageHandler interface {
	CreateHandler(request *I2NSFRequest) (interface{}, error)
	DeleteHandler(id uuid.UUID) error
	GetConfig(id uuid.UUID) interface{}
}

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

var storage StorageHandler

func NewRouter(stoH StorageHandler) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)
		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
		storage = stoH
	}
	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Status: CONTROLLER UP")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"ApiCreateI2nsf",
		strings.ToUpper("Post"),
		"/ccips",
		ApiCreateI2nsf,
	},

	Route{
		"ApiDeleteI2nsf",
		strings.ToUpper("Delete"),
		"/ccips/{uuid}",
		ApiDeleteI2nsf,
	},

	Route{
		"ApiStatusI2nsf",
		strings.ToUpper("Get"),
		"/ccips/{uuid}",
		ApiStatusI2nsf,
	},

	Route{
		"ApiUploadCertificate",
		"POST",
		"/ccips/certificate",
		ApiUploadCertificate,
	},

	Route{
		"ApiGetCertificate",
		"GET",
		"/ccips/certificate/{uuid}",
		ApiGetCertificate,
	},

	Route{
		"ApiCreateQKD",
		"POST",
		"/ccips/createqkd",
		ApiForwardQKD,
	},


}
